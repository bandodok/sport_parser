user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
        worker_connections 768;
}

http {
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;

        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE
        ssl_prefer_server_ciphers on;

        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;

        gzip on;

        include /etc/nginx/conf.d/*.conf;
        include /etc/nginx/sites-enabled/*;

        # настройки сервера
        server {
            listen 443 ssl http2;
            ssl_certificate /etc/letsencrypt/live/{{ env.HOST_NAME }}/fullchain.pem;
            ssl_certificate_key /etc/letsencrypt/live/{{ env.HOST_NAME }}/privkey.pem;
            include /etc/letsencrypt/options-ssl-nginx.conf;
            ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
            server_name {{ env.HOST_NAME }};
            location /static/ {
                root /home/bandodok/;
            }
            location / {
                # proxy_params
                proxy_set_header Host $http_host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;

                proxy_ssl_server_name on;
                proxy_pass http://app:8000;
                proxy_connect_timeout 2000;
                proxy_send_timeout 2000;
                proxy_read_timeout 2000;
                send_timeout 2000;
            }

             location /ws/ {
                proxy_ssl_server_name on;
                proxy_pass http://ws:8080;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection "upgrade";
                }
        }
        server {
            if ($host = {{ env.HOST_NAME }}) {
                return 301 https://$host$request_uri;
            }
            listen 80;
            server_name {{ env.HOST_NAME }};
            return 404;
        }
}
