- hosts: all
  vars:
    env:
      SECRET_KEY: "{{ lookup('env','SECRET_KEY') }}"
      TAG: "{{ lookup('env','TAG') }}"
      DEBUG: "{{ lookup('env','DEBUG') }}"
      ALLOWED_HOSTS: "{{ lookup('env','ALLOWED_HOSTS') }}"
      SERVER_IP: "{{ lookup('env','SERVER_IP') }}"
      HOST_NAME: "{{ lookup('env','HOST_NAME') }}"
      SERVER_USERNAME: "{{ lookup('env','SERVER_USERNAME') }}"
      ADMIN_USERNAME: "{{ lookup('env','ADMIN_USERNAME') }}"
      ADMIN_PASSWORD: "{{ lookup('env','ADMIN_PASSWORD') }}"
      DB_NAME: "{{ lookup('env','DB_NAME') }}"
      DB_USER: "{{ lookup('env','DB_USER') }}"
      DB_PASSWORD: "{{ lookup('env','DB_PASSWORD') }}"
      DB_HOST: "{{ lookup('env','DB_HOST') }}"
      DB_PORT: "{{ lookup('env','DB_PORT') }}"
      CHROMEDRIVER: "{{ lookup('env','CHROMEDRIVER') }}"
      ROLLBAR_TOKEN: "{{ lookup('env','ROLLBAR_TOKEN') }}"
      REDIS_HOST: "{{ lookup('env','REDIS_HOST') }}"

  tasks:
    - name: Install required system packages
      ansible.builtin.apt:
        name: "{{ item }}"
        state: latest
        update_cache: yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools' ]
      become: yes
      tags: init

    - name: Install docker
      ansible.builtin.apt:
        name: "{{ item }}"
        state: latest
        update_cache: yes
      loop: ['docker', 'docker-compose']
      become: yes
      tags: init

    - name: Get services list
      ansible.builtin.service_facts:
      tags: init

    - name: Stopping nginx service
      ansible.builtin.systemd:
        name: nginx
        state: stopped
        enabled: no
      become: yes
      when: "'nginx' in ansible_facts.services"
      tags: init

    - name: Stopping postgresql service
      ansible.builtin.systemd:
        name: postgresql
        state: stopped
        enabled: no
      become: yes
      when: "'postgresql' in ansible_facts.services"
      tags: init

    - name: remove all files if exist
      ansible.builtin.shell:
        removes: /home/sport_parser
        cmd: "rm -rf /home/sport_parser"
      become: yes
      tags: remove_all

    - name: remove db files if exist
      ansible.builtin.shell:
        removes: /home/sport_parser/postgresql
        cmd: "rm -rf /home/sport_parser/postgresql"
      become: yes
      tags: remove_db

    - name: remove app files if exist
      ansible.builtin.shell:
        removes: /home/sport_parser/app
        cmd: "rm -rf /home/sport_parser/app"
      become: yes
      tags: remove_app

    - name: create project folder
      ansible.builtin.shell:
        creates: /home/sport_parser
        cmd: "mkdir /home/sport_parser -m 777"
      become: yes
      tags: create_folders

    - name: create app folder
      ansible.builtin.shell:
        creates: /home/sport_parser/app
        cmd: "mkdir /home/sport_parser/app -m 777"
      become: yes
      tags: create_folders

    - name: create test env file
      ansible.builtin.copy:
        src: .env
        dest: /home/sport_parser/app/.env
      tags: create_test_env

    - name: create prod env file
      ansible.builtin.shell:
        chdir: /home/sport_parser/app
        cmd: 'echo "{{ item.key }}={{ item.value }}" >> .env'
      loop: "{{ env | dict2items }}"
      tags: create_prod_env

    - name: copy files
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      loop:
        - { src: nginx.conf.j2, dest: /home/sport_parser/app/_nginx.conf }
        - { src: ../init.sql.j2, dest: /home/sport_parser/_init.sql }
        - { src: docker-compose.yml, dest: /home/sport_parser/app/docker-compose.yml }
      tags: copy_files

    - name: Get certificate
      ansible.builtin.shell:
        removes: "/etc/letsencrypt/live/{{ lookup('env','HOST_NAME') }}"
        cmd: "ls /etc/letsencrypt/live/{{ lookup('env','HOST_NAME') }}"
      become: yes
      register: cert
      tags: copy_files

    - name: copy nginx ssl file
      ansible.builtin.template:
        src: nginx_ssl.conf.j2
        dest: /home/sport_parser/app/_nginx.conf
      when: "'fullchain.pem' in cert.stdout"
      tags: copy_files

    - name: create autorun service
      ansible.builtin.copy:
        src: sport_parser.service
        dest: /etc/systemd/system/sport_parser.service
      become: yes
      tags: run_app

    - name: enable and reload systemd
      ansible.builtin.shell:
        cmd: |
          systemctl daemon-reload
          systemctl enable sport_parser.service
      become: yes
      tags: run_app

    - name: run app
      ansible.builtin.shell:
        chdir: /home/sport_parser/app
        cmd: |
          docker-compose -f docker-compose.yml pull
          docker-compose -f docker-compose.yml up --build --remove-orphans -d
      become: yes
      tags: run_app
